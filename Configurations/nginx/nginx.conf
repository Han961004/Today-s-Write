worker_processes auto;

events {
    worker_connections 1024;
}

http {
    upstream django {
        server docker-django_app-1:8000;  # Django 컨테이너 이름 확인
    }

    upstream fast {
        least_conn;
        server docker-fast_app-1:8001;  # FastAPI 컨테이너 이름 확인
        server docker-fast_app-2:8001;  # FastAPI 컨테이너 이름 확인
    }

    server {
        listen 80;

        # /status 경로에 대한 요청 처리
        location /status {
            stub_status on;             # 상태 정보를 표시하도록 설정
            access_log off;             # 상태 페이지 요청에 대해 로그를 남기지 않도록 설정
            allow 0.0.0.0/0;            # 모든 IP에서 접근 가능
            deny all;                   # 그 외 IP는 접근 불가
        }

        location /api/ {
            proxy_pass http://fast/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location / {
            proxy_pass http://django;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}

'''
이 두 설정 파일은 FastAPI와 Django의 Nginx 설정을 나타내고 있습니다. FastAPI와 Django 애플리케이션을 각각 http://fast와 http://django로 프로시하여 요청을 전달하는 역할을 합니다. 하지만 설정에서 몇 가지 차이가 있습니다. 이 차이를 이해하려면 두 가지를 비교해봅시다.

1. proxy_pass에 / 붙이는 문제
FastAPI (/api/에 대한 요청 처리): FastAPI의 엔드포인트에 proxy_pass http://fast/와 같이 /를 붙인 경우, location /api/ 경로로 요청이 들어오면, Nginx는 요청 URL의 /api/를 FastAPI로 전달할 때 경로를 잘라내지 않고 그대로 전달합니다. 즉, /api/posts 요청이 http://fast/posts로 전달됩니다. 이를 통해 FastAPI 서버의 /posts와 같은 경로에서 처리할 수 있습니다.

Django (/에 대한 요청 처리): Django 서버는 proxy_pass http://django로 설정되어 있어, 요청이 들어오면 경로를 변경하지 않고 그대로 Django 애플리케이션에 전달됩니다. /로 시작하는 요청이 Django로 전달되고, Django는 기본적으로 루트 URL에 맞는 처리를 합니다.

2. 차이점
FastAPI의 proxy_pass에 /를 붙여서 경로를 전달하는 방식과 Django의 proxy_pass에 /를 붙이지 않는 방식에서 차이가 발생합니다.
FastAPI는 /api/ 경로가 붙은 요청을 처리하는데, /를 붙여서 경로를 그대로 전달하는 방식으로 설정합니다.
Django는 /로 시작하는 요청을 그대로 처리하므로 경로를 변경하지 않습니다.
3. 수정 사항
둘 다 기본적으로 올바른 방식이지만, proxy_pass에서 경로를 어떻게 처리할지에 대한 정책 차이가 있습니다.

FastAPI 부분: /api/ 경로를 잘라내지 않으려면 /를 붙여서 proxy_pass http://fast/로 설정하는 것이 맞습니다.
Django 부분: /로 요청이 들어왔을 때 Django 서버로 그대로 전달하려면 proxy_pass http://django;로 설정하는 것이 적합합니다.
결론
현재 설정이 문제없이 작동할 수 있지만, /api/ 경로의 요청이 FastAPI로 전달되도록 하려면 /를 붙이고, Django는 경로를 그대로 전달하므로 / 없이 설정해두는 것이 좋습니다. 추가적으로, 경로 처리 방식이 필요할 경우, 예를 들어 FastAPI의 엔드포인트들이 /api/ 경로에 포함되도록 하려면, proxy_pass를 어떻게 설정할지에 대한 고민을 할 수 있습니다.

따라서 설정은 서로 달라야 할 필요가 있습니다.
'''
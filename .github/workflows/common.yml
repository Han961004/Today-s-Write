name: Common Deploy

on:
  workflow_call:
    inputs:
      service:
        description: '배포할 서비스 이름 (fast_app)'
        required: true
        type: string
        default: "fast_app"
      scale:
        description: '서비스 복제본 수'
        required: false
        type: string
        default: "2"
  workflow_dispatch:
    inputs:
        service:
            description: '배포할 서비스 이름 (fast_app)'
            required: true
            type: string
            default: "fast_app"
        scale:
            description: '서비스 복제본 수'
            required: false
            type: string
            default: "2"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH keys
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.AWS_LS_SSH_KEY }}

      - name: Deploy to AWS Lightsail
        env:
          SERVICE: ${{ inputs.service }}
          SCALE: ${{ inputs.scale }}  # ✅ 기본값 1 적용
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.AWS_LS_IP }} << EOF
          
          set -e

          echo "🚀 Deploying service: $SERVICE"
          echo "🛠 Scale: ${SCALE:-1}"

          # 1. 기존 apt 프로세스 종료 및 락 파일 삭제
          sudo pkill -9 apt || true
          sudo rm -rf /var/lib/apt/lists/lock /var/lib/dpkg/lock /var/lib/dpkg/lock-frontend
          
          # 2. Docker 및 Docker Compose 설치
          sudo apt update && sudo apt install -y docker.io curl
          sudo mkdir -p /usr/local/lib/docker/cli-plugins
          sudo curl -SL "https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64" \
              -o /usr/local/lib/docker/cli-plugins/docker-compose
          sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
          docker compose version
          
          # 3. 프로젝트 디렉토리 설정 및 Git 업데이트
          PROJECT_DIR="/home/Today-s-Write"
          sudo mkdir -p $PROJECT_DIR
          sudo chown -R ubuntu:ubuntu $PROJECT_DIR
          if [ ! -d $PROJECT_DIR/.git ]; then
              git clone https://github.com/Han961004/Today-s-Write.git $PROJECT_DIR
          else
              cd $PROJECT_DIR
              git fetch origin main
              git reset --hard origin/main
          fi
          
          # 4. nginx.conf 파일 확인
          cat /home/Today-s-Write/Configurations/nginx/nginx.conf || { echo "❌ nginx.conf 파일이 없습니다. 배포 중지."; exit 1; }
          
          # 5. 기존 컨테이너 정리 및 이미지 정리
          cd $PROJECT_DIR
          sudo docker compose -f /home/Today-s-Write/Configurations/docker/docker-compose.yml down
          sudo docker image prune -af
          
          # 6. 서비스 배포 (scale 값을 직접 지정)
          sudo docker compose -f /home/Today-s-Write/Configurations/docker/docker-compose.yml up --build -d --scale django_app=1 --scale fast_app=2
          
          echo "✅ Deployment for $SERVICE completed successfully."
          EOF
